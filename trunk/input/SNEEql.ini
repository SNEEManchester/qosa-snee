[General]

#Determines whether graphs are to be generated.
generate_graphs = false

#Specifies whether PDF output is desired.
generate_pdfs = false

#Purge old output files at the start of every run
delete_old_files = true

#the root directory for the compiler outputs
output_root_dir = output

[QoSAware]

#Specifies whether the QoS-aware routing algorithm is to be used, or the plain vanilla one.
routing = false

#Specifies whether the QoS-aware partitioning algorithm is to be used, or the plain vanilla one.
partitioning = false

#Specifies whether the QoS-aware where-scheduling algorithm is to be used, or the plain vanilla one.
where_scheduling = false

#Specifies whether the QoS-aware when-scheduling algorithm is to be used, or the plain vanilla one.
when_scheduling = false

[Inputs]

#File with query to be run
query = input/Pipes/Q1.txt

#File with the QoS specification
#Set to "none" if no qos-file is to be read (does not preclude QoS-related command-line arguments being set)
qos_file = input/qos/qos-vanilla.xml

#The name of the file with the sensor network topology
network_topology_file = input/Networks/10-node-topology.nss

#The name of the file which specifies the resources available on each site
site_resource_file = input/mica2-site-resources.xml

#The name of the file with the schemas
#schema_file = input/mini_network_schemas.xml
#schema_file = input/schemas.xml
schema_file = input/Pipes/8Site-3Sources-withOverlap-schemas.xml

#The name of the file with the cost-model parameters
cost_parameters = input/cost-parameters.xml

#The name of the file with the types
types_file = input/Types.xml

#The name of the file with the user unit definitions
user-units-file = input/units.xml

#The default sink node, in case any of the queries doesn't have a specified sink (from the command line)
default_sink = 0

[Haskell]

#Tempory setting to only use Haskell in test environment
#Will be deprecated to true.
use = false

#Directory that has the Haskell decl file
decl_dir = src/haskellTranslator

#Executable used to run the Haskell translator.
main = SNEEqlMain.hs

#Decl file used to run the Haskell translator.
decl_file = Declarations.txt

[Display]

#Determines whether graphs are to be displayed.  
#If set to false, overrides 
#display_distributed_query_plan and display routing tree properties.
#Does not stop the generating the graphs files.
#If set to true forces generate_graphs to true
graphs = false

#Determines whether sensor network topology graph is displayed
sensor_network_topology = true

# Determines whether an AST is displayed 
ast = true

#Determines whether logical query plan is displayed.
laf = true

#Determines whether physical query plan is displayed.
paf = true

#Determines whether the routing tree is displayed.
rt = true

#Determines whether the fragmented-algebraic form is displayed.
faf = true

#Determines whether distributed-algebraic form is displayed.
daf = true

#Determines whether the agenda is displayed.
agenda = true

#Determines whether the operator properties are displayed
operator_properties = true

#Determines whether link properties are displayed in the sensornet topology graph and routing tree
sensornet_link_properties = false

#Determines whether a site properties (energy available, operators placed on 
#it) are displayed or not on the topology and routing tree graphs.
site_properties = false

# Determines whether Tuple Attributes are displayed
tuple_attributes = false

#Cause the operator name to include All, Stream and such descriptions
operator_data_type = false

#Determines whether the exchange operator routing support function is displayed
exchange_operator_routing = false

#Determines whether the config graphs are displayed.
config_graphs = true

#Determines whether Cost Expressions displayed.
#Works even in the vanilla version which doesn't use the cost Expressions.
cost_expressions = false

[Debug]

#Causes the application to exit as soon as an error is detected
exit_on_error = true

[Measurement]
#Measurement options are not set in the ini file.
 
[Logical_Optimization]
#When set to true this allows the physical optimiser to remove unrequired operators.
#For example when using All window transmission the RSTREAM 
#and some windows (NEW for example) are not required.
# as do not change the data being sent at all. 
remove_unrequired_operators = true
#When set will push projection into the last operator that needs the data
push_projection_down = true

#When true combines acquire and select whenever it is legal to do so.
combine_acquire_and_select = true

[Physical_Optimization]

[Routing]

#The random seed to use when generating steiner trees
#For ICDE08, VLDB08 we used random seed = 4.
random_seed = 4

#QoS-aware version only - The max number of routing trees to generate
trees_to_generate = 10

#QoS-aware version only - The max number of routing trees to keep after scoring and ranking
trees_to_keep = 5


[Partitioning]


[Where_Scheduling]

remove_redundant_exchanges = false


[When_Scheduling]

#Vanilla version only - when true when-scheduling reduces the buffering factor to prevent 
#the need for agendas to overlap.  Note that if this cannot be achieved an optimization 
#exception is thrown. When false, an optimization exception is thrown straight away
#without attempts being made to reduce buffering factor.

decrease_bfactor_to_avoid_agenda_overlap = true

[Code_Generation]

targets = tossim, avrora, tossim2, avrora2, insense


[NesC]

#Set to true to explicitly turn on/off the radio (Doesn't work in Tossim)
control_radio_off = true

#Adjust the radio power depending on the distance between a sender and receiver.
adjust_radio_power = true

#The maximum size, in bytes, of data (i.e., payload) in message that can be sent across the radio
max_message_payload_size = 29

#The overhead incurred, in bytes, with each message in the payload of the message, e.g., for sending previous fragment information
payload_overhead = 6

#The typical synchronization error between the nodes in the sensornet
synchronization_error = 10

#The time which should be spent synchronizing with the other nodes in the sensornet at the start
#This should be considerably larger than the initial boot time
synchronization_period = 3000

#Put the mote in a low-power state during periods of inactivity.  Not applicable for Tossim.
power_management = true

#Specifies if the last tuples should be delivered.
deliver_last = false

#Specifies if LED debug lines should be included.
led_debug = false

#In all max_debug_statements the type of bedug statement only included on true
#Are those only needed to debug this operator alone.
#Statments needed to debug other operators should be level 3 but without the flag

#Prints detailed debug statements in tray component.
max_debug_statements_in_tray = false

#Prints detailed debug statements in row window component.
max_debug_statements_in_row_window = true

#Prints detailed debug statements in time window component.
max_debug_statements_in_time_window = false

#Prints detailed debug statements in time window component.
max_debug_statements_in_aggregates = false

[Logger]
#location of the main log file
log_file = JavaLogFile.txt

#location of the memory file, which gives detailed logging information if a severe error occurs
memory_file = JavaMemoryFile.txt

#level for the root logger. This includes all java
all_log_level = info

#max level to send to consule regardless of class level.
#max levels regardless of class level.
max_console_log_level = all

#max level to send to log_file regardless of class level.
max_file_log_level = all
